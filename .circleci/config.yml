version: 2.1

commands:
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
      - run:
          name: "Destroy Backend and Frontend environment"
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>


  revert-migrations:
    description: Revert the last migration
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}   
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/N4WnpYNLfMTMbwrNZrUZGT/migration_<< parameters.workflow_id >>)
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build           
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build


  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build           
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test

                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm install
            npm install --save-dev webpack@5.72.0
            npm audit fix         
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Install tar and gzip
          command: |
            yum -y install tar 
            yum -y install gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
              
    
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: check directory and files
          command: pwd && ls

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo [web] > .circleci/ansible/inventory.txt   
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt  

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"     
  
  configure-infrastructure:
    docker:
      - image: cimg/python:3.9 #python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["94:90:43:82:75:2f:b1:f1:69:2e:60:3f:e7:4a:95:5c"]
      - attach_workspace:
          at: ~/
       
      - run:
          name: Install dependencies
          command: |
            pip3 install ansible awscli
            sudo apt-get install -y tar gzip
            

 #           apk add --update ansible
 #           apk add --update tar 
 #           apk add --update gzip
 #           pip install gcc -y
 #           pip3 install ansible awscli
          
      - run:
          name: Configure server
          command: |
            # code added here
            pwd
            cat .circleci/ansible/inventory.txt
            echo ENVIRONMENT=production > "backend/.env"
            ls
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            # upto here new        
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
          no_output_timeout: 30m

      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
 # code added         
      - run:
         name: Install awscli
         command: |
           sudo apt-get update
           sudo apt-get install -y awscli curl   
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            npm run migrations
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt

      - run:
          name: Send migration status to kvdb.io 
          command: | 
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/N4WnpYNLfMTMbwrNZrUZGT/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"


  deploy-frontend:
    docker:
      - image: amazon/aws-cli
        user: root

    steps:
      - checkout
      - run:
          name: Install tar/gzip utility
          command: | 
            yum -y install tar
            yum -y install gzip
      - attach_workspace:
          at: ~/  
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            yum install python3-pip -y
 #           yum install ansible -y

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            cat .env
            npm install
            #npm audit fix
            #npm audit fix --force
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

  deploy-backend:
    docker: 
      - image: python:3.7-alpine3.11 #python:3.9-alpine3.11 ##cimg/python:3.9 #python:3.9-alpine3.11
      # Docker image here that supports Ansible
    steps:
      - checkout 
      - add_ssh_keys:
          fingerprints: ["94:90:43:82:75:2f:b1:f1:69:2e:60:3f:e7:4a:95:5c"]
      - attach_workspace:
          at: ~/
 
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
            awscli \
            && rm -rf /var/cache/apk/*
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            aws --version

 #           # apk add --update ansible
 #           # apk add --update tar 
 #           # apk add --update gzip
 #           # apk add --update curl nodejs npm
 #           # apk add --no-cache \
 #           #     python3 \
 #           #     py3-pip \
 #           # && pip3 install --upgrade pip \ 
 #           # && pip3 install awscli \
 #           # echo 'aws cli version:'
 #           # aws --version
 #          -m pip install --upgrade pip


            
      - run:
          name: Deploy backend
          no_output_timeout: 30m
          command: |
            echo ENVIRONMENT=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz . 
            pwd
            ls
            cd .circleci/ansible
            echo "Contents of the inventory.txt file are -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
          
      - run:
          name: Wait for the app to start 
          no_output_timeout: 30m
          command: python -m unittest

      # - revert-migrations:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

      # - destroy-environment: 
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
      
    steps:
      - checkout 
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm python3 py3-pip
            pip3 install --upgrade pip
            pip3 install awscli
            aws --version

      # - run:
      #     name: Frontend smoke test.
      #     command: |
      #       URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
      #       echo ${URL} 
      #       if curl -s ${URL} | grep "Welcome"
      #       then
      #         # Change this to 0 after the job fails
      #         return 0
      #       else
      #         return 1
      #       fi  

      - run:
          name: Backend smoke test.
          command: |
            echo "Wait for backend to become available..."
            sleep 30s
            echo "Attempting to reach backend..."
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
              then
                return 0
              else
                return 1
            fi
            
      # - run:
      #     name: Frontend smoke test.
      #     command: |
      #       URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
      #       echo ${URL} 
      #       if curl -s ${URL} | grep "Welcome"
      #       then
      #         # Change this to 0 after the job fails
      #         return 0
      #       else
      #         return 1
      #       fi

      # - destroy-environment:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
            
      # - revert-migrations:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_13.x | bash -
            yum install -y nodejs
           
      - run:
          name: Update cloudfront distribution
          command: |
            # export OldWorkflowID=$(aws cloudformation \
            #   list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            #   --no-paginate --output text)
            # echo $OldWorkflowID >> ~/OldWorkflowID.txt
            # cat ~/OldWorkflowID.txt
            # echo OldWorkflowID: "${OldWorkflowID}"
            # echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}"
        
            # aws cloudformation deploy \
            #   --template-file .circleci/files/cloudfront.yml \
            #   --stack-name InitialStack \
            #   --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" OldWorkflowID="${OldWorkflowID}" \
            #   --tags project=udapeople

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name "udapeople-cloudfront-" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

            #  aws cloudformation deploy \
            #   --template-file .circleci/files/cloudfront.yml \
            #   --stack-name "udapeople-cloudfront-${CIRCLE_WORKFLOW_ID:0:7}" \
            #   --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            #   --tags project=udapeople            

            # aws cloudformation deploy \
            #   --template-file .circleci/files/cloudfront.yml \
            #   --stack-name "InitialStack" \
            #   --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            #   --tags project=udapeople            


      # - destroy-environment:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # - revert-migrations:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: Get old stack workflow id and Remove old stacks and files
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"        
            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter "CREATE_COMPLETE" --no-paginate --output text) 
            echo Stack names: "${STACKS[@]}"


            # if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            # then  
            #   echo "Stack exist, remove....${OldWorkflowID}"
            #   echo "s3://udapeople-${OldWorkflowID}"
            #   aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
            #   aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            #   aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"                            
            # fi


            if [[ "${OldWorkflowID}" =~ "${CIRCLE_WORKFLOW_ID:0:7}" ]]
            then
              echo "------------I am cleaning the house-------------"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
             echo "---------Unable to clean------------"
            fi


# would be replaced after one debugg-----------------------
#            else
#             echo "---------Unable to clean------------"
            # export OldWorkflowID=$(aws cloudformation \
            #   list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            #   --no-paginate --output text)
            # echo $OldWorkflowID >> ~/OldWorkflowID.txt
            # cat ~/OldWorkflowID.txt
# your code goes here

#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#               # You can use any condition like:
#               # if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
#               # if [[ "${OldWorkflowID}" =~ "${STACKS[@]}"  ]]
#               if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]

#               then
#               # your code goes here
#                 echo "I am cleaning the house"
#                 aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
#                 aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
#                 aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"

#               else          
#                 echo " The house is not clean"
#               fi

###################
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#             # Fetch the Old workflow ID
#             export OldWorkflowID=$(aws cloudformation \
#             list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
#             --no-paginate --output text)
#             echo OldWorkflowID: "${OldWorkflowID}"
#             echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
#             # Fetch the stack names          
#             export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
#             --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
#             echo Stack names: "${STACKS[@]}"



############################

  # cleanup:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout 
  #     - run:
  #         name: Get old stack workflow id
  #         command: |
  #           export OldWorkflowID=$(aws cloudformation \ 
  #             list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \ 
  #             --no-paginate --output text)
  #           echo OldWorkflowID: "${OldWorkflowID}"
  #           echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"          
  #           export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \ 
  #             --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
  #           echo Stack names: "${STACKS[@]}"

  #     - run:
  #         name: Remove old stacks and files
  #         command: |
  #           if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
  #           then
  #             echo "------------I am cleaning the house-------------"
  #             aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
  #             aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
  #             aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
  #           else
  #             echo "---------Unable to clean------------"
  #           fi


#       ##################next checkstart###
# # - run:
# #     name: Backend smoke test.
# #     command: |
# #       export BACKEND_URL=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
# #       echo http://${BACKEND_URL}:3030/api/status
# #       if 
# #         curl -s http://${BACKEND_URL}:3030/api/status | grep "ok"
# #       then
# #         exit 0
# #       else
# #         exit 1
# #       fi          
#          export OldWorkflowID=$(aws cloudformation \
#           list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
#            --no-paginate --output text)
#          echo $OldWorkflowID >> ~/OldWorkflowID.txt
#            cat ~/OldWorkflowID.txt
            
#         aws cloudformation deploy \
#         --template-file .circleci/files/cloudfront.yml \
#         --stack-name "InitialStack-${OldWorkflowID}" \
#         --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
#         --tags project=udapeople
#       # - echo OldWorkflowID: "${OldWorkflowID}"
#       # - echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}"   

#       # Here's where you will add some code to rollback on failure 
# URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-east-1.amazonaws.com/"
###############################################above new code###############


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]

 #           #   cd .circleci/ansible \
 #           # echo [web] > inventory.txt \
 #           # aws ec2 describe-instances \
 #           # --query 'Reservations[*].Instances[*].PublicIpAddress' \
 #           # --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
 #           # --output text >> inventory.txt 
 #.circleci/ansible/inventory.txt
 # echo [web] > .circleci/ansible/inventory.txt
 #           # aws ec2 describe-instances \
 #          # --query 'Reservations[*].Instances[*].PublicIpAddress' \
 #           # --filters "Name=tag:project,Values=udapeople" \
 #           # --output text >> .circleci/ansible/inventory.txt
 #           # cat .circleci/ansible/inventory.txt


            
 #        #  BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
 #         #     --filters "Name=tag:Name,Values=backend-prod-${CIRCLE_WORKFLOW_ID}" \
 #         #     --query 'Reservations[*].Instances[*].PublicIpAddress' \
 #         #     --output text)
 #         #   echo "http://$BACKEND_AWS_PUBLIC_IP:3030" > ~/output.txt
 #         #   echo "$BACKEND_AWS_PUBLIC_IP" >> .circleci/ansible/inventory.txt
 #         #   cat .circleci/outputs/backend_url.txt
 #         #   cat ~/output.txt 
 ########new solution    
      #  aws cloudformation deploy \
      #           --template-file .circleci/files/cloudfront.yml \
      #           --stack-name InitialStack \
      #           --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" OldWorkflowID="${OldWorkflowID}" \
      #           --tags project=udapeople

      #           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
      #       then
      #           # your code goes here
      #           echo "Stack exist, remove....${OldWorkflowID}"
      #           echo "s3://udapeople-${OldWorkflowID}"
      #           aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
      #           aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
      #           aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"                            
      #       fi
      ####################### new to improving code
            # echo ENVIROMENT=$ENVIROMENT > .env
            # echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> .env
            # echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> .env
            # echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> .env
            # echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> .env
            # echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            # echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            # echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            # echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            # echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            # npm run migrations > migrations_dump.txt