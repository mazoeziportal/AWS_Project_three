version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:07}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

#  aws s3 rb --force s3://udapeople-<< parameters.workflow_id >>
#   aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
#   aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>



jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build           
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build


  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build           
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test

                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm install
            npm install --save-dev webpack@5.72.0
            npm audit fix         
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Install tar and gzip
          command: |
            yum -y install tar 
            yum -y install gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
              
    
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt


 # aws ec2 describe-instances \
 # --query 'Reservations[*].Instances[*].PublicIpAddress' \
 #   --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
 #   --output text >> inventory.txt
 #- persist_to_workspace:
 #         root: .circleci/
 #         paths:
 #           - ansible/inventory.txt
            
      - persist_to_workspace:
          root: ~/
          paths:
            - AWS_Project_three/.circleci/ansible

#     - destroy-environment:
#       workflow_id: "${CIRCLE_WORKFLOW_ID}"

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c4:76:d4:08:5b:92:ad:3e:bd:13:34:63:70:be:16:b8"]
      - attach_workspace:
          at: ~/
       
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar 
            apk add --update gzip
          
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

 #  #   - destroy-environment
#  #       when: on_fail
#  #         workflow_id: "${CIRCLE_WORKFLOW_ID}"

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt

      - run:
          name: Send migration status to kvdb.io 
          command: | 
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/N4WnpYNLfMTMbwrNZrUZGT/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi


#  #  - destroy-environment
#  #    when:on_fail

#  #   workflow_id: "${CIRCLE_WORKFLOW_ID}"


  deploy-frontend:
    docker:
      - image: amazon/aws-cli
        user: root
      
#  #     circleci/node:13.8.0
#  #       user: root
    steps:
      - checkout
      - run:
          name: Install tar/gzip utility
          command: | 
            yum -y install tar
            yum -y install gzip
      - attach_workspace:
          at: ~/  
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            yum install python3-pip -y  
#  ###        sudo apt install npm 
#  ###        npm run build
#  #           curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#  #           unzip awscliv2.zip
#  ####        sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env





            # BACKEND_IP=$(aws ec2 describe-instances \
            # --query 'Reservations[*].Instances[*].PublicIpAddress' \
            # --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            # export BACKEND_IP=$(aws ec2 describe-instances...............)
            # export API_URL="http://${BACKEND_IP}:3030"
            # echo "API_URL = ${API_URL}"
            # echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            # cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
 #     - destroy-environment
  deploy-backend:
    docker: 
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      - checkout 
      - add_ssh_keys:
          fingerprints: ["c4:76:d4:08:5b:92:ad:3e:bd:13:34:63:70:be:16:b8"]
      - attach_workspace:
          at: ~/
 
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar 
            apk add --update gzip
            apk add --update curl nodejs npm
            apk add --no-cache \
                python3 \
                py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install awscli 
            echo 'aws cli version:'
            aws --version
            
 
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cp package* ./dist
            cd ..
            echo "Zip the directory and copy it to ansible deploy role"
            tar -C backend -czvf artifact.tar.gz .
            mkdir .circleci/ansible/roles/deploy/files
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files
            echo "Check inventory and execute ansible playbook"
            cd .circleci/ansible
            echo "Contents of the inventory.txt file are -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml



  # cd backend
  #   npm i
  #   npm run build
  #   cd ..
  #   tar -C backend -czvf artifact.tar.gz .
  #   cd .circleci/ansible
  #   echo [web] > inventory.txt
  #   aws ec2 describe-instances \
  #   --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #   --filters "Name=tag:project,Values=udapeople" \
  #   --output text >> inventory.txt
  #   cat inventory.txt
  #   ansible-playbook -i inventory.txt deploy-backend.yml
              
      - destroy-environment
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11 
      
    steps:
      - checkout 
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
            aws --version




#       # - run:
#       #     name: Get backend url
#       #     command: |
#       #       BACKEND_IP=$(aws ec2 describe-instances \
#       #         --query 'Reservations[*].Instances[*].PublicIpAddress' \
#       #         --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi

            
#             # export BACKEND_IP=$(aws ec2 describe-instances \
#             # --query 'Reservations[*].Instances[*].PublicIpAddress' \
#             # --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
#             # export API_URL="http://${BACKEND_IP}:3030"
#             # echo "${API_URL}"
#             # if curl "${API_URL}/api/status" | grep "ok"
#             # then
#             #     return 0
#             # else
#             #     return 1
#             # fi



 

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]


  #--stack-name udapeople-frontend-udapeople-fh1m246plxqqrs728 \
            #--parameter-overrides ID=udapeople-fh1m246plxqqrs728 \

            #--stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            #--parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \ 
            #--parameter-overrides ID=udapeople-fh1m246plxqqrs728  \ 
            #       - run: cat ~/inventory.txt
            #yum -y install tar gzip
            # - run: yum -y install tar gzip
#             exit 1
#             ansible-playbook -i inventory.txt playbook.yml
#             # Your code here
#             exit 1
#       # Here's where you will add some code to rollback on failure          
# ansible-playbook -i /tmp/ansible/inventory.txt .circleci/ansible/configure-server.yml
#       - destroy-environment
#            echo "Destroying environment: << parameters.workflow_id >> "
# aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
 #          aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:07}
 #           aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
 #echo "Destroying environment: << parameters.workflow_id >> "
 #           aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
 #           aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
            # aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:07}
            #  aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

            # aws cloudformation delete-stack --stack-name udapeople-backend-udapeople-fh1m246plxqqrs728
 #           --parameter-overrides ID=udapeople-fh1m246plxqqrs728 \
            
            # aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:07}
            # aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
 #           aws cloudformation delete-stack --stack-name udapeople-backend-udapeople-fh1m246plxqqrs728
 #           aws cloudformation delete-stack --stack-name udapeople-frontend-udapeople-fh1m246plxqqrs728
            
  #   npm install --save-dev webpack@5.72.0
#   deploy-infrastructure:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run: 
#           name: Install tar and gzip
#           command: |
#               yum -y install tar 
#               yum -y install gzip

#       - run:
#           name: Ensure back-end infrastructure exists
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/backend.yml \
#               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
#               --tags project=udapeople
              
#  #             
#  #      --parameter-overrides ID=udapeople-fh1m246plxqqrs728 \                     
              
              
#       - run:
#           name: Ensure front-end infrastructure exist
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/frontend.yml \
#               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
#               --tags project=udapeople

 #              
 #   --parameter-overrides ID=udapeople-fh1m246plxqqrs728 \  
          
      # - run:
      #     name: Add back-end ip to ansible inventory
      #     command: |
      #         echo [all] > .circleci/ansible/inventory.txt
      #         aws ec2 describe-instances \
      #           --query 'Reservations[*].Instances[*].PublicIpAddress' \
      #           --output text >> inventory
            
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - project/.circleci/ansible/inventory.txt

 #     - destroy-environment: udapeople-fh1m246plxqqrs728
 #         workflow_id: udapeople-fh1m246plxqqrs728  
 #         ${CIRCLE_WORKFLOW_ID:0:7}

         
  # configure-infrastructure:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["c4:76:d4:08:5b:92:ad:3e:bd:13:34:63:70:be:16:b8"]
  #     - attach_workspace:
  #         at: ~/
       
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible
  #           apk add --update tar 
  #           apk add --update gzip
 #           pip install awscli

#       - run:
#           name: Configure server
#           command: |
#             cd .circleci/ansible
#             ansible-playbook -i inventory.txt configure-server.yml

#       - destroy-environment:
#           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
#  #             
#  #      --parameter-overrides ID=udapeople-fh1m246plxqqrs728 \
# cd .circleci/files
# aws cloudformation deploy \
#          --template-file cloudfront.yml \
#          --stack-name InitialStack\
#          --parameter-overrides WorkflowID=
#      pip install awscli
#      npm run migrations:revert
#     stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
# npm install --save-dev webpack@5.72.0
# - IpProtocol: PostgreSQL
#           FromPort: 5432
#           ToPort: 5432
#           CidrIp: 0.0.0.0/0
#           # aws cloudformation deploy \
 #           #   --template-file .circleci/files/backend.yml \
 #           #   --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
 #           #   --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
 #           #   --tags project=udapeople 

##              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
#--parameter-overrides ID=udapeople-fh1m246plxqqrs728
  #           --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \ 
#         paths:
 #           - project/.circleci/ansible/inventory.txt
 #         # attach workspace
          
 #sudo update apt packages
 #           npm install
 #           apt-get update && sudo apt-get install -yy less

 #     - run:
 #         name: Frontend smoke test.
 #         command: |
            # your code here
      # Here's where you will add some code to rollback on failure  




            # your code here
      # Here's where you will add some code to rollback on failure 
 
 # apk add --update ansible
 #           apk add --update tar 
 #           apk add --update gzip
 
 
 
 
 #     - revert-migrations 
            



 #           pip install awscli
# pip install awscli
 #           curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
 #           yum -y install nodejs
 #           npm install -g npm
 #           npm install oauth2
 #           npm install webpack



 #           curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" unzip awscliv2.zip
 #           ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
            
            
 #           npm install
 #           yum install -y nodejs
 #           curl -sL https://rpm.nodesource.com/setup_13.8 | bash -
 #           
 #           yum -y install curl -y
 #           npm install
 #           pip install awscli
  #           apt-get update -y
            

 #           apt-get install -y Python3.8
            
            
 #           apt -y update && apt install -y python3
 #           apk add --update ansible
            
 #           echo "Contents  of the inventory.txt file is -------"
            
            
            
              
            


  #           apk add --update curl nodejs npm ansible zip
  #           apt-get install -y Python3.8
  #           apk add --update ansible
   #          pip install awscli
  #           pip install awscli
  #           apk add --update curl nodejs npm
  #           apk add --update curl tar
  #           npm install
  #           yum -y install nodejs
  #           # your code here
  #           apt-get install -y npm
  #            apt update
   #           pip install awscli
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "${API_URL}"
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure 
  # deploy-backend:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #      # Docker image here that supports Ansible
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["c4:76:d4:08:5b:92:ad:3e:bd:13:34:63:70:be:16:b8"]


  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  
  ## echo pwd
 # touch .circleci/ansible/inventory.txt
            # echo [web] >> .circleci/ansible/inventory.txt 